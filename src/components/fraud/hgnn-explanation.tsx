
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { AlertTriangle, Network } from 'lucide-react';

interface HGNNExplanationProps {
  explanation?: {
    feature_importance?: Record<string, number>;
    suspicious_connections?: Array<{
      entity_type: string;
      entity_id: string;
      risk_contribution: number;
    }>;
    risk_factors?: string[];
  };
  riskScore: number;
}

const HGNNExplanation: React.FC<HGNNExplanationProps> = ({ explanation, riskScore }) => {
  if (!explanation) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="text-base">HGNN Model Analysis</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-center h-32 bg-muted/50 rounded-md">
            <p className="text-muted-foreground">No explanation available</p>
          </div>
        </CardContent>
      </Card>
    );
  }

  // Sort feature importance by contribution
  const sortedFeatures = explanation.feature_importance ? 
    Object.entries(explanation.feature_importance)
      .sort(([, a], [, b]) => b - a)
      .slice(0, 5) : 
    [];

  return (
    <Card>
      <CardHeader>
        <CardTitle className="text-base flex items-center gap-2">
          <Network className="h-4 w-4" />
          HGNN Model Analysis
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {explanation.risk_factors && explanation.risk_factors.length > 0 && (
          <div>
            <h4 className="font-medium text-sm mb-2">Risk Factors</h4>
            <div className="space-y-1">
              {explanation.risk_factors.map((factor, idx) => (
                <div key={idx} className="flex items-center gap-2 text-sm">
                  <AlertTriangle className="h-3.5 w-3.5 text-amber-500" />
                  <span>{factor}</span>
                </div>
              ))}
            </div>
          </div>
        )}

        {sortedFeatures.length > 0 && (
          <div>
            <h4 className="font-medium text-sm mb-2">Feature Importance</h4>
            <div className="space-y-2">
              {sortedFeatures.map(([feature, importance]) => (
                <div key={feature}>
                  <div className="flex justify-between text-sm mb-1">
                    <span className="capitalize">{feature.replace('_', ' ')}</span>
                    <span className="font-medium">{(importance * 100).toFixed(1)}%</span>
                  </div>
                  <Progress value={importance * 100} className="h-1.5" />
                </div>
              ))}
            </div>
          </div>
        )}

        {explanation.suspicious_connections && explanation.suspicious_connections.length > 0 && (
          <div>
            <h4 className="font-medium text-sm mb-2">Suspicious Connections</h4>
            <div className="space-y-1.5">
              {explanation.suspicious_connections.map((connection, idx) => (
                <div key={idx} className="text-sm flex justify-between">
                  <span className="flex items-center gap-1 capitalize">
                    <span className="w-2 h-2 rounded-full bg-red-500"></span>
                    {connection.entity_type}: {connection.entity_id}
                  </span>
                  <span className="text-red-500 font-medium">
                    +{(connection.risk_contribution * 100).toFixed(1)}%
                  </span>
                </div>
              ))}
            </div>
          </div>
        )}

        <div className="border-t pt-3 mt-2">
          <p className="text-xs text-muted-foreground">
            This analysis is generated by the HGNN (Heterogeneous Graph Neural Network) model 
            that examines relationships between users, orders, and payment methods to detect fraud patterns.
          </p>
        </div>
      </CardContent>
    </Card>
  );
};

export default HGNNExplanation;
